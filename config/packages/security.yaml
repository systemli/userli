security:
    enable_authenticator_manager: true

    # https://symfony.com/doc/current/security.html#c-hashing-passwords
    password_hashers:
        App\Entity\User:
            algorithm: sodium
        legacy:
            id: 'App\Security\Encoder\LegacyPasswordHasher'
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: plaintext

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # Custom UserProvider to allow login via email and localpart (without domain)
        user:
            id: App\Security\UserProvider
        keycloak:
            memory:
                users:
                    - identifier: keycloak
                      roles: ['ROLE_KEYCLOAK']
        postfix:
            memory:
                users:
                    - identifier: postfix
                      roles: ['ROLE_POSTFIX']
        dovecot:
            memory:
                users:
                    - identifier: dovecot
                      roles: ['ROLE_DOVECOT']

    role_hierarchy:
        # User
        ROLE_USERLI_ADMIN_USER_READER:
            - ROLE_USERLI_ADMIN_USER_LIST
            - ROLE_USERLI_ADMIN_USER_VIEW
        ROLE_USERLI_ADMIN_USER_EDITOR:
            - ROLE_USERLI_ADMIN_USER_CREATE
            - ROLE_USERLI_ADMIN_USER_EDIT
        ROLE_USERLI_ADMIN_USER_ADMIN:
            - ROLE_USERLI_ADMIN_USER_LIST
            - ROLE_USERLI_ADMIN_USER_VIEW
            - ROLE_USERLI_ADMIN_USER_CREATE
            - ROLE_USERLI_ADMIN_USER_EDIT
            - ROLE_USERLI_ADMIN_USER_DELETE

        # Alias
        ROLE_USERLI_ADMIN_ALIAS_READER:
            - ROLE_USERLI_ADMIN_ALIAS_LIST
            - ROLE_USERLI_ADMIN_ALIAS_VIEW
        ROLE_USERLI_ADMIN_ALIAS_EDITOR:
            - ROLE_USERLI_ADMIN_ALIAS_CREATE
            - ROLE_USERLI_ADMIN_ALIAS_EDIT
        ROLE_USERLI_ADMIN_ALIAS_ADMIN:
            - ROLE_USERLI_ADMIN_ALIAS_LIST
            - ROLE_USERLI_ADMIN_ALIAS_VIEW
            - ROLE_USERLI_ADMIN_ALIAS_CREATE
            - ROLE_USERLI_ADMIN_ALIAS_EDIT
            - ROLE_USERLI_ADMIN_ALIAS_DELETE

        # Domain
        ROLE_USERLI_ADMIN_DOMAIN_READER:
            - ROLE_USERLI_ADMIN_DOMAIN_LIST
            - ROLE_USERLI_ADMIN_DOMAIN_VIEW
        ROLE_USERLI_ADMIN_DOMAIN_EDITOR:
            - ROLE_USERLI_ADMIN_DOMAIN_CREATE
            - ROLE_USERLI_ADMIN_DOMAIN_EDIT
        ROLE_USERLI_ADMIN_DOMAIN_ADMIN:
            - ROLE_USERLI_ADMIN_DOMAIN_ALL

        # Voucher
        ROLE_USERLI_ADMIN_VOUCHER_READER:
            - ROLE_USERLI_ADMIN_VOUCHER_LIST
            - ROLE_USERLI_ADMIN_VOUCHER_VIEW
        ROLE_USERLI_ADMIN_VOUCHER_EDITOR:
            - ROLE_USERLI_ADMIN_VOUCHER_CREATE
            - ROLE_USERLI_ADMIN_VOUCHER_EDIT
        ROLE_USERLI_ADMIN_VOUCHER_ADMIN:
            - ROLE_USERLI_ADMIN_VOUCHER_ALL

        # Reserved Name
        ROLE_USERLI_ADMIN_RESERVEDNAME_READER:
            - ROLE_USERLI_ADMIN_RESERVEDNAME_LIST
            - ROLE_USERLI_ADMIN_RESERVEDNAME_VIEW
        ROLE_USERLI_ADMIN_RESERVEDNAME_EDITOR:
            - ROLE_USERLI_ADMIN_RESERVEDNAME_CREATE
            - ROLE_USERLI_ADMIN_RESERVEDNAME_EDIT
        ROLE_USERLI_ADMIN_RESERVEDNAME_ADMIN:
            - ROLE_USERLI_ADMIN_RESERVEDNAME_ALL

        # Spam account is always suspicious
        ROLE_SPAM:
            - ROLE_USER
            - ROLE_SUSPICIOUS

        ROLE_PERMANENT:
            - ROLE_USER
        ROLE_MULTIPLIER:
            - ROLE_USER
        ROLE_DOMAIN_ADMIN:
            - ROLE_PERMANENT
            - ROLE_MULTIPLIER
            - ROLE_SONATA_ADMIN
            - ROLE_USERLI_ADMIN_USER_ADMIN
            - ROLE_USERLI_ADMIN_ALIAS_ADMIN
        ROLE_ADMIN:
            - ROLE_DOMAIN_ADMIN
            - ROLE_USERLI_ADMIN_DOMAIN_ADMIN
            - ROLE_USERLI_ADMIN_VOUCHER_ADMIN
            - ROLE_USERLI_ADMIN_RESERVEDNAME_ADMIN
        ROLE_SUPER_ADMIN:
            - ROLE_ADMIN
            - ROLE_ALLOWED_TO_SWITCH

    access_decision_manager:
        strategy: unanimous

    firewalls:
        dev:
            pattern: ^/(_(profiler|error|wdt)|css|images|js)/
            security: false
        keycloak:
            pattern: ^/api/keycloak
            stateless: true
            provider: keycloak
            access_token:
                token_handler: App\Security\KeycloakAccessTokenHandler
        postfix:
            pattern: ^/api/postfix
            stateless: true
            provider: postfix
            access_token:
                token_handler: App\Security\PostfixAccessTokenHandler
        roundcube:
            pattern: ^/api/roundcube
            stateless: true
            provider: user
            http_basic:
                realm: Roundcube API
        dovecot:
            pattern: ^/api/dovecot
            stateless: true
            provider: dovecot
            access_token:
                token_handler: App\Security\DovecotAccessTokenHandler
        main:
            pattern: ^/
            provider: user
            lazy: true
            user_checker: App\Security\UserChecker
            form_login:
                enable_csrf: true
                require_previous_session: false
                login_path: login
                check_path: login
                default_target_path: start
            logout:
                path: logout
                invalidate_session: false
            two_factor:
                auth_form_path: 2fa_login
                check_path: 2fa_login_check
                enable_csrf: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
      - { path: "^/$", roles: PUBLIC_ACCESS }
      - { path: "^/init", roles: PUBLIC_ACCESS }
      - { path: "^/login", roles: PUBLIC_ACCESS }
      - { path: "^/recovery", roles: PUBLIC_ACCESS }
      - { path: "^/register", roles: PUBLIC_ACCESS }
      - { path: "^/logout", roles: PUBLIC_ACCESS }
      - { path: "^/2fa", roles: IS_AUTHENTICATED_2FA_IN_PROGRESS }
      - { path: "^/start", roles: ROLE_USER }
      - { path: "^/voucher", roles: ROLE_USER, allow_if: "!is_granted('ROLE_SUSPICIOUS')" }
      - { path: "^/alias", roles: ROLE_USER, allow_if: "!is_granted('ROLE_SPAM')" }
      - { path: "^/account", roles: ROLE_USER, allow_if: "!is_granted('ROLE_SPAM')" }
      - { path: "^/openpgp", roles: ROLE_USER, allow_if: "!is_granted('ROLE_SPAM')" }
      - { path: "^/admin", roles: ROLE_DOMAIN_ADMIN }
      - {
          path: "^/api/keycloak",
          ips: "%env(KEYCLOAK_API_IP_ALLOWLIST)%",
          allow_if: "'%env(KEYCLOAK_API_ENABLED)%' == 'true' and is_granted('ROLE_KEYCLOAK')",
        }
      - { path: "^/api/keycloak", roles: ROLE_NO_ACCESS }
      - {
          path: "^/api/postfix",
          ips: "%env(POSTFIX_API_IP_ALLOWLIST)%",
          allow_if: "'%env(POSTFIX_API_ENABLED)%' == 'true' and is_granted('ROLE_POSTFIX')",
        }
      - { path: "^/api/postfix", roles: ROLE_NO_ACCESS }
      - {
          path: "^/api/roundcube",
          ips: "%env(ROUNDCUBE_API_IP_ALLOWLIST)%",
          allow_if: "'%env(ROUNDCUBE_API_ENABLED)%' == 'true' and is_granted('ROLE_USER')",
        }
      - { path: "^/api/roundcube", roles: ROLE_NO_ACCESS }
      - {
          path: "^/api/dovecot",
          ips: "%env(DOVECOT_API_IP_ALLOWLIST)%",
          allow_if: "'%env(DOVECOT_API_ENABLED)%' == 'true' and is_granted('ROLE_DOVECOT')",
        }
      - { path: "^/api/dovecot", roles: ROLE_NO_ACCESS }
