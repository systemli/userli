{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Userli","text":"<p>Web application to (self-) manage e-mail users and encrypt their mailboxes.</p> <p></p>"},{"location":"#features","title":"Features","text":"<ul> <li>User self-service (change password/recovery token, set aliases, ...)</li> <li>Invite code system (new users get three invite codes after one week)</li> <li>Domain admins (accounts with admin rights for one domain)</li> <li>Random alias feature for users</li> <li>Recovery tokens to restore accounts when password got lost</li> <li>Support for Dovecot mailbox encryption</li> <li>Multi-language support (English, French, Spanish, Portuguese, Bokm\u00e5l, and German provided)</li> </ul>"},{"location":"#roles","title":"Roles","text":"<p>Userli supports a role system to help you run your mail server.</p> <ul> <li>User - Default role</li> <li>Multiplier - Like user but with unlimited invite codes</li> <li>Suspicious - User without invite codes</li> <li>Spam - This account is suspected to be hacked and can't send mail anymore</li> <li>Permanent - Don't delete this account in user cleanup </li> <li>Domain-Admin - Can add/edit/delete users and aliases for their domain</li> <li>Admin - Can add/edit/delete all available data</li> </ul>"},{"location":"#contribute","title":"Contribute","text":"<p>This is a start. Please help to improve the documentation.</p>"},{"location":"development/","title":"Getting started","text":"<p>We provide a <code>docker-compose.yml</code> file that starts Userli with MariaDB, Dovecot, Roundcube and Mailcatcher to set up a development environment. Userli will be available at http://localhost:8000 and Roundcube at http://localhost:8001. Mails will be caught by Mailcatcher and can be viewed at http://localhost:1080.</p>"},{"location":"development/#requirements","title":"Requirements","text":"<ul> <li><code>docker-compose</code> or <code>podman-compose</code></li> <li><code>yarn</code> (or <code>yarnpkg</code> on Ubuntu or Debian based systems)</li> <li><code>composer</code></li> <li><code>make</code></li> </ul> <p>Info</p> <p>If you don't have podman or docker installed, you can find the installation instructions on the podman website or the docker website.</p>"},{"location":"development/#set-up","title":"Set up","text":"<p>Start the containers:</p> podmandocker <pre><code>podman compose up -d\n</code></pre> <pre><code>docker compose up -d\n</code></pre> <p>Info</p> <p>This command will initiate building the containers on first run. Append <code>--build</code> to always force a full rebuild</p> <p>Install PHP dependencies, run composer scripts and update JavaScript assets:</p> <pre><code>make assets\n</code></pre> <p>Tip</p> <p>See the contents of the <code>Makefile</code> if you are interested what each <code>make</code>-command does.</p> <p>Initialize the database:</p> podmandocker <pre><code>podman compose exec userli bin/console doctrine:schema:create\n</code></pre> <pre><code>docker compose exec userli bin/console doctrine:schema:create\n</code></pre> <p>Install sample data:</p> podmandocker <pre><code>podman compose exec userli bin/console doctrine:fixtures:load\n</code></pre> <pre><code>docker compose exec userli bin/console doctrine:fixtures:load\n</code></pre> <p>Info</p> <p>The <code>doctrine:fixtures:load</code> command will create four new accounts with corresponding roles (<code>admin</code>, <code>user</code>, <code>support</code>, <code>suspicious</code>) as well as some random aliases and vouchers. The domain for all accounts is \"example.org\" and the password is \"password\".</p> <p>If you want to see more details about how the users are created, see <code>src/DataFixtures</code>.</p> <p>Open your browser and go to http://localhost:8000</p>"},{"location":"development/#troubleshooting","title":"Troubleshooting","text":"<p>On systems with SELinux enabled, the webserver might throw an error due to broken filesystem permissions. To fix this, create <code>docker-compose.override.yml</code> in the root directory with following content:</p> <pre><code>---\nservices:\n  userli:\n    security_opt:\n      - label=disable\n\n  dovecot:\n    security_opt:\n      - label=disable\n</code></pre>"},{"location":"development/code_of_conduct/","title":"Code of Conduct","text":""},{"location":"development/code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"development/code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"development/code_of_conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"development/code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"development/code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at userli@systemli.org. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"development/code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"development/coding_style/","title":"Coding style","text":"<p>We use the default Symfony coding style.</p> <p>Check and adjust coding style by running <code>php-cs-fixer</code>:</p> <pre><code>make cs-fixer\n</code></pre>"},{"location":"development/icons/","title":"Icons","text":"<p>We're using Githubs Octicons v9 for icons on the index page. Icons from V10 onwards look a bit different and don't allign with earlier ones.</p> <p>All icons should be 14*14 px, #333333 on transparent background without padding.</p>"},{"location":"development/logs/","title":"Logs","text":""},{"location":"development/logs/#userli","title":"Userli","text":"<p>Userli utilizes the Monolog for logging which is configured in <code>config/packages/monolog.yaml</code>.</p> <p>Logs are written to <code>var/log/text.log</code> and <code>var/log/dev.log</code> when running in the <code>test</code> or <code>dev</code> environment respectively.</p> <p>The logs are JSON formatted.</p> <p>Inspecting the logs:</p> <pre><code>tail -f var/log/dev.log | jq\n</code></pre>"},{"location":"development/logs/#dockerpodman","title":"Docker/Podman","text":"<p>Sometimes it's necessary to inspect the logs of the containers.</p> <p>Say you want to inspect the logs for the <code>dovecot</code> container:</p> podmandocker <pre><code>podman compose logs -f dovecot\n</code></pre> <pre><code>docker compose logs -f dovecot\n</code></pre>"},{"location":"development/release/","title":"Creating release tarballs","text":"<p>Release tarballs are the preferred way to install Userli. This page explains how to create them.</p> <p>First, you'll need a Github API token. The token needs the following privileges:</p> <pre><code>public_repo, repo:status, repo_deployment\n</code></pre> <p>Now, execute the following script. It will create a version tag, release and copy the info from <code>CHANGELOG.md</code> to the release info.</p> <pre><code>GITHUB_API_TOKEN=&lt;token&gt; GPG_SIGN_KEY=\"&lt;key_id&gt;\" ./bin/github-release.sh &lt;version&gt;\n</code></pre>"},{"location":"development/tests/","title":"Tests","text":"<p>You will need to create the database schema once:</p> <pre><code>bin/console doctrine:schema:create --env=test\n</code></pre>"},{"location":"development/tests/#phpunit","title":"PHPUnit","text":"<p>Create sample test data and run tests:</p> <pre><code>make test\n</code></pre>"},{"location":"development/tests/#behat","title":"Behat","text":"<p>Run Behat <pre><code>make integration\n</code></pre></p> <p>Tip</p> <p>See the contents of the <code>Makefile</code> if you are interested what each <code>make</code>-command does.</p>"},{"location":"development/tests/#testing-the-dovecot-integration","title":"Testing the Dovecot integration","text":"<p>After spinning up the docker/podman containers, find out the address of internal subnet create of the containers.</p> podmandocker <pre><code>podman network inspect userli_userli | grep subnet\n</code></pre> <pre><code>docker network inspect userli_userli | grep subnet\n</code></pre> <p>The output should look like this:</p> <pre><code>\"subnet\": \"10.89.0.0/24\"\n</code></pre> <p>Enable the Dovecot API in Userli by adding these environment variables to your <code>.env.local</code>, using the subnet that you identified in the last step. Make sure to use the same Access Token as is used in <code>docker-compose.yml</code></p> <pre><code>DOVECOT_API_ENABLED=true\nDOVECOT_API_ACCESS_TOKEN=\"dovecot\"\nDOVECOT_API_IP_ALLOWLIST=\"&lt;your docker/podman network&gt;\"\n</code></pre> <p>After enabling the Dovecot API, you might need to restart the dovecot container.</p> <p>Now you should be able to test the Dovecot API from withing the Dovecot container:</p> podmandocker <pre><code>podman compose exec dovecot doveadm auth test user@example.org password\n</code></pre> <pre><code>podman compose exec dovecot doveadm auth test user@example.org password\n</code></pre> <p>See the Dovecot documentation for more context.</p>"},{"location":"features/integrations/","title":"Integrations","text":"<p>Userli provides several authenticated APIs to integrate with external systems (Keycloak, Dovecot, Postfix, Retention, Roundcube). Access is now controlled via API Tokens with fine-grained scopes. The previous env-var based access tokens and IP allowlists are no longer used.</p>"},{"location":"features/integrations/#api-tokens-and-scopes","title":"API tokens and scopes","text":"<p>Create and manage tokens via UI: Settings \u2192 API Tokens (<code>/settings/api</code>).</p> <p>CLI:</p> <ul> <li>Create: <code>bin/console app:api-token:create --name \"My Token\" --scopes keycloak --scopes dovecot</code></li> <li>Delete: <code>bin/console app:api-token:delete --token &lt;PLAIN_TOKEN&gt;</code></li> </ul> <p>Scopes control which API areas the token can call:</p> Scope Endpoint prefix Description keycloak /api/keycloak/ Keycloak user lookup, count, and validation dovecot /api/dovecot/ Dovecot passdb auth and lookup postfix /api/postfix/ Postfix helpers (domain/mailbox/alias/senders) retention /api/retention/ Update last login and list deleted users roundcube /api/roundcube/ Roundcube helpers (e.g., list user aliases after auth) <p>How to send the token</p> <p>Preferred header:</p> <ul> <li><code>Authorization: Bearer &lt;PLAIN_TOKEN&gt;</code> (\"Bearer\" is case-insensitive)</li> </ul> <p>Fallback header:</p> <ul> <li><code>X-API-Token: &lt;PLAIN_TOKEN&gt;</code> (used only if no valid Bearer token is present)</li> </ul> <p>Bearer takes precedence over <code>X-API-Token</code>. An invalid Authorization format falls back to <code>X-API-Token</code> when present.</p> <p>Token visibility and tracking</p> <ul> <li>Tokens are stored hashed; the plain token is shown only once on creation. Copy and store it safely.</li> <li>Last-used timestamps are tracked and shown in the UI.</li> <li>Endpoints enforce required scopes automatically; missing scopes result in HTTP 403.</li> </ul>"},{"location":"features/integrations/#keycloak","title":"Keycloak","text":"<p>Userli exposes <code>/api/keycloak/</code> for user lookup and verification, intended for use with a Keycloak user storage provider. See the Keycloak User Provider for Userli and Keycloak's official docs on user storage providers for reference.</p> <p>Authentication: Use an API token that includes the <code>keycloak</code> scope.</p> <p>Example (search users):</p> <pre><code>GET /api/keycloak/&lt;domain&gt;/?search=john&amp;max=10&amp;first=0\nAuthorization: Bearer &lt;PLAIN_TOKEN_WITH_keycloak_SCOPE&gt;\n</code></pre>"},{"location":"features/integrations/#dovecot","title":"Dovecot","text":"<p>A Lua adapter is available to use the <code>/api/dovecot/</code> endpoints for userdb/passdb in Dovecot.</p> <p>Lua adapter in this repository</p> <ul> <li>The adapter lives at <code>contrib/userli-dovecot-adapter.lua</code> and adds the Authorization header automatically (<code>Bearer &lt;TOKEN&gt;</code>).</li> <li>It expects the environment variables <code>USERLI_API_ACCESS_TOKEN</code> (plain API token) and <code>USERLI_HOST</code> on the Dovecot host.</li> <li>A step-by-step setup, including importing the environment variables in Dovecot, is documented here: Installation \u203a Dovecot.</li> <li>Learn more in Dovecot\u2019s official docs: Lua-based authentication.</li> </ul>"},{"location":"features/integrations/#retention","title":"Retention","text":"<p>Each time a user authenticates (classic login, or via Keycloak/Dovecot APIs), Userli updates the user's last login time. Some services issue long-lived tokens and won\u2019t re-authenticate regularly, which can make last-login based retention inaccurate and complicate invalidation of stale client tokens.</p> <p>Userli provides generic API methods at <code>/api/retention/</code> to:</p> <ul> <li>Touch a user\u2019s last login timestamp independent of authentication</li> <li>List deleted users for a domain</li> </ul> <p>See userli-synapse-user-retention for an example.</p> <p>Authentication: Use an API token that includes the <code>retention</code> scope.</p> <p>Examples:</p> <p>Touch last login (optional unix timestamp, must not be in the future):</p> <pre><code>PUT /api/retention/&lt;email&gt;/touch\nAuthorization: Bearer &lt;PLAIN_TOKEN_WITH_retention_SCOPE&gt;\nContent-Type: application/json\n\n{ \"timestamp\": 1693843200 }\n</code></pre> <p>List deleted users for a domain:</p> <pre><code>GET /api/retention/&lt;domain&gt;/users\nAuthorization: Bearer &lt;PLAIN_TOKEN_WITH_retention_SCOPE&gt;\n</code></pre>"},{"location":"features/integrations/#migration-notes-deprecated-settings","title":"Migration notes (deprecated settings)","text":"<p>Replaced by scoped API tokens</p> <p>The following options are deprecated and have been removed in favor of scoped API tokens:</p> <ul> <li><code>KEYCLOAK_API_ENABLED</code>, <code>KEYCLOAK_API_IP_ALLOWLIST</code>, <code>KEYCLOAK_API_ACCESS_TOKEN</code></li> <li><code>RETENTION_API_ENABLED</code>, <code>RETENTION_API_IP_ALLOWLIST</code>, <code>RETENTION_API_ACCESS_TOKEN</code></li> </ul> <p>Use a scoped API token instead and pass it via <code>Authorization: Bearer ...</code> (or <code>X-API-Token</code>).</p>"},{"location":"features/mail_crypt/","title":"MailCrypt","text":"<p>The software has builtin support for Dovecot's mailbox encryption, using the global keys mode. Keys are created and maintained by userli and handed over via an API and can be consumed by Dovecot by a Lua script. See here for how to configure authentication and mailcrypt in Dovecot.</p> <p>The MailCrypt feature is enabled per default and can optionally be switched off globally by setting <code>MAIL_CRYPT=0</code> in the dotenv (<code>.env</code>) file.</p> <p>If you want to enable MailCrypt for some users, but don't want new users to have MailCrypt enabled per default, you can set <code>MAIL_CRYPT=1</code> in the dotenv (<code>.env</code>) file. The following values are supported for <code>MAIL_CRYPT</code>:</p> <ul> <li><code>MAIL_CRYPT=0</code> - Disable MailCrypt globally</li> <li><code>MAIL_CRYPT=1</code> - Allow to use MailCrypt, needs to be enabled manually for new   users</li> <li><code>MAIL_CRYPT=2</code> - Enforce MailCrypt key generation for new users</li> <li><code>MAIL_CRYPT=3</code> - Enforce MailCrypt key generation for all users, see the   documentation about migrating legacy users for more info</li> </ul> <p>MailCrypt can be turned on/off for individual users by setting the <code>mail_crypt</code> switch in the <code>virtual_users</code> database table. This switch is mainly meant to provide a migration path from legacy users without MailCrypt keys. On new setups, it's recommended to keep MailCrypt enabled for all users.</p>"},{"location":"features/mail_crypt/#implementation-details","title":"Implementation details","text":"<p>We use elliptic curve keys with curve secp521r1. The private key is encrypted with a libargon2i hash of the users' password, stored in a libsodium secret box.</p> <p>A second copy of the private key is stored encrypted with a libargon2i hash of the users' recovery token, to be used when a user restores their account after they lost their password.</p>"},{"location":"features/mail_crypt/#migrating-legacy-users","title":"Migrating legacy users","text":"<p>Legacy users (without MailCrypt keys) continue to work without mailbox encryption. If they generate a recovery token manually in the account settings, a MailCrypt key pair gets created for them. This doesn't enable MailCrypt for them automatically, though. Reason is that this would result in acounts with partially unencrypted (the old) and partially encrypted (the new) mails. Therefore we decided to leave the exercise to enable MailCrypt for legacy users who got a MailCrypt key pair generated in the meantime to the system admins (e.g. by a cron script).</p> <p>In order to enable MailCrypt for a legacy user, do the following:</p> <ol> <li>Ensure that they have a recovery token generated. This will automatically    generate MailCrypt key pair as well. This step can only be done by the    account holder, as the user password is required to do so.</li> <li>Manually set <code>mail_crypt=1</code> for the user in the <code>virtual_users</code> database    table. This needs to be done on a per-user basis on purpose (e.g. by a    cron script).</li> </ol> <p>Or, alternatively, to enforce MailCrypt for all legacy users:</p> <ol> <li>Set <code>MAIL_CRYPT=3</code> in the dotenv (<code>.env</code>) file. This will result in a    MailCrypt key pair being generated automatically when legacy users log    in the next time. Again, we cannot do this step without the user logging    in, as the user password is required to do so.</li> <li>Manually set <code>mail_crypt=1</code> for all users in the <code>virtual_users</code> database    table that have a MailCrypt key pair generated but MailCrypt not enabled    yet. This needs to be done on a per-user basis on purpose (e.g. by a cron    script).</li> </ol> <p>Please note that existing mails will not be encrypted automatically. Instead, all existing mail stays unencrypted and only new incoming mail will be stored encrypted.</p> <p>The following SQL statement can be used to enable MailCrypt for all legacy users that got a MailCrypt key pair generated. Use with caution!</p> <pre><code>UPDATE virtual_users SET mail_crypt=1 WHERE mail_crypt_secret_box IS NOT NULL AND mail_crypt = 0;\n</code></pre>"},{"location":"features/webhooks/","title":"Webhooks","text":"<p>Userli supports webhooks to notify external services about user-related events. This allows for seamless integration with other systems and automation of workflows.</p> <p>Info</p> <p>We provide a webhook listener to inform Nextcloud and Synapse about user changes. See the <code>userli-webhook-listener</code> repository for more information: https://github.com/systemli/userli-webhook-listener/</p>"},{"location":"features/webhooks/#supported-events","title":"Supported Events","text":"<p>The following events can trigger webhooks:</p> <ul> <li><code>user.created</code>: Triggered when a new user is created.</li> <li><code>user.deleted</code>: Triggered when a user is deleted.</li> </ul>"},{"location":"features/webhooks/#configuring-webhooks","title":"Configuring Webhooks","text":"<p>To configure webhooks create an endpoint via UI: Settings \u2192 Webhooks (<code>/settings/webhooks</code>). You need to provide the following information:</p> <ul> <li>URL: The endpoint URL where the webhook payload will be sent.</li> <li>Secret: A secret key used to sign the webhook payload for security purposes.</li> <li>Events: Select at least one event that should trigger the webhook (at least one is required by validation).</li> <li>Enabled: Enable or disable the webhook.</li> </ul>"},{"location":"features/webhooks/#webhook-payload","title":"Webhook Payload","text":"<p>The webhook payload is sent as a JSON object in the body of the POST request. Here is an example payload for a <code>user.deleted</code> event:</p> <pre><code>{\n    \"type\": \"user.deleted\",\n    \"timestamp\": \"2025-09-10T11:36:14+00:00\",\n    \"data\": {\n        \"email\": \"user@example.org\"\n    }\n}\n</code></pre>"},{"location":"features/webhooks/#webhook-headers","title":"Webhook Headers","text":"<p>Each webhook request includes the following headers:</p> <ul> <li><code>Content-Type: application/json</code></li> <li><code>X-Webhook-Signature</code>: HMAC SHA256 signature of the request body (see Security section).</li> <li><code>X-Webhook-Id</code>: Unique identifier for the webhook request.</li> <li><code>X-Webhook-Attempt</code>: Number of attempts made to deliver the webhook (starts at 1).</li> </ul>"},{"location":"features/webhooks/#delivery-retry-behavior","title":"Delivery &amp; Retry Behavior","text":""},{"location":"features/webhooks/#timeout","title":"Timeout","text":"<p>Webhook delivery requests have a hard timeout of 10 seconds (including connection establishment and waiting for the HTTP response). If your endpoint does not return a response within this window, the attempt is considered failed and the retry mechanism (described below) is triggered.</p> <p>Design your endpoint to:</p> <ul> <li>Respond quickly (perform slow work asynchronously if possible)</li> <li>Return a 2xx status code only after the payload has been durably accepted</li> <li>Avoid long-running synchronous processing during the request</li> </ul>"},{"location":"features/webhooks/#retry-policy","title":"Retry Policy","text":"<p>Failed deliveries are retried up to 3 additional times using an incremental backoff schedule:</p> <ol> <li>1st retry after 10 seconds</li> <li>2nd retry after 60 seconds</li> <li>3rd retry after 360 seconds (6 minutes)</li> </ol> <p>After the final failed attempt, the delivery is marked as permanently failed and no further retries are scheduled.</p> <p>The <code>X-Webhook-Attempt</code> header starts at <code>1</code> for the initial attempt and increments with each retry. Your receiver should treat webhook handling as idempotent; use <code>X-Webhook-Id</code> to de\u2011duplicate if you receive the same event more than once (e.g. due to retries near a race condition with your processing logic).</p>"},{"location":"features/webhooks/#manual-retries","title":"Manual Retries","text":"<p>You can manually trigger a retry for a specific webhook delivery from the Userli admin interface. This is useful if you have fixed an issue with your endpoint and want to reprocess a failed webhook event.</p>"},{"location":"features/webhooks/#success-criteria","title":"Success Criteria","text":"<p>A delivery is considered successful if your endpoint returns any 2xx HTTP status code within the 10 second timeout. All other status codes (3xx, 4xx, 5xx) or network/errors/timeouts trigger a retry (if remaining attempts exist).</p>"},{"location":"features/webhooks/#recommendations-for-consumers","title":"Recommendations for Consumers","text":"<ul> <li>Immediately validate the signature before processing</li> <li>Persist (or log) <code>X-Webhook-Id</code> to guarantee idempotency</li> <li>Offload heavy work to a queue and return a 2xx quickly</li> <li>Monitor for missing events by tracking consecutive failed attempts</li> <li>Consider alerting if you observe attempt values &gt;1 for many events</li> </ul>"},{"location":"features/webhooks/#security","title":"Security","text":"<p>To ensure the authenticity of webhook requests, each request includes an <code>X-Webhook-Signature</code> header. This signature is generated using HMAC with SHA256 and a secret key that you provide when configuring the webhook. You can verify the signature on your server to confirm that the request originated from Userli. The signature is computed as follows:</p> <pre><code>hmac_sha256(secret, body)\n</code></pre>"},{"location":"features/wkd/","title":"Web Key Directory","text":"<p>Userli brings support for OpenPGP Web Key Directory, a OpenPGP key discovery system. Users can import and update their OpenPGP key and it will be published in the Web Key Directory according to the OpenPGP Web Key Directory Internet Draft.</p> <p>The WKD feature depends on GnuPG being installed.</p> <p>The WKD directory path can be configured by setting <code>WKD_DIRECTORY</code> in the dotenv (<code>.env</code>) file. Write access to the WKD directory is required.</p> <p>The WKD directory format can be configured by setting <code>WKD_FORMAT</code> in the dotenv (<code>.env</code>) file. The supported settings are <code>advanced</code> (default) and <code>direct</code>. See the OpenPGP Web Key Directory Internet Draft for details.</p> <p>The WKD directory can be regenerated at any time by running the console command: </p> <pre><code>bin/console app:wkd:export-keys\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Webserver (e.g Caddy)</li> <li>PHP &gt;= 8.2 with libsodium</li> <li>MariaDB or MySQL</li> <li>OpenSSL binary (for MailCrypt feature)</li> <li>GnuPG version 2.1.14 or newer</li> </ul> <p>You can also run this application with PostgreSQL oder SQLite.</p>"},{"location":"installation/code/","title":"Get the code","text":"<p>Install the latest release.</p> <p>Download and unpack the actual source code.</p> <pre><code>mkdir userli &amp;&amp; cd userli\nwget https://github.com/systemli/userli/releases/download/x.x.x/userli-x.x.x.tar.gz\n# Check signature and hash sum, if you know how to\ntar -xvzf userli-x.x.x.tar.gz\n</code></pre>"},{"location":"installation/commands/","title":"Commands","text":"<p>This app brings custom commands:</p> <pre><code>app:admin:password                      Set password of admin user\napp:alias:delete                        Delete an alias\napp:metrics                             Global Metrics for Userli\napp:openpgp:delete-key                  Delete OpenPGP key for email\napp:openpgp:import-key                  Import OpenPGP key for email\napp:openpgp:show-key                    Show OpenPGP key of email\napp:report:weekly                       Send weekly report to all admins\napp:reservednames:import                Import reserved names from stdin or file\napp:users:delete                        Delete a user\napp:users:list                          List users\napp:users:mailcrypt                     Get MailCrypt values for user\napp:users:quota                         Get quota of user if set\napp:users:registration:mail             Send a registration mail to a user\napp:users:remove                        Removes all mailboxes from deleted users\napp:users:reset                         Reset a user\napp:users:restore                       Reset a user\napp:voucher:count                       Get count of vouchers for a specific user\napp:voucher:create                      Create voucher for a specific user\napp:voucher:unlink                      Remove connection between vouchers and accounts after 3 months\napp:wkd:export-keys                     Export all OpenPGP keys to WKD directory\n</code></pre> <p>Get more information about each command by running:</p> <pre><code>bin/console {{ command }} --help\n</code></pre>"},{"location":"installation/configuration/","title":"Configuration","text":"<p>You can personalize your Userli instance by creating <code>.env.local</code>, which overrides some values from <code>.env</code>. You should at least configure the following values.</p> <pre><code>APP_ENV=prod\nAPP_SECRET=&lt;random secret string&gt;\nDATABASE_URL=mysql://userli:&lt;password&gt;@127.0.0.1:3306/userli\nMAILER_DSN=smtp://localhost:25\n</code></pre> <p>Look into <code>.env</code> to get more information about variables and how to handle them.</p>"},{"location":"installation/customize/","title":"Customize","text":"<p>You can override translation strings individually by putting them into override localization files at <code>translations/&lt;lang&gt;/messages.&lt;lang&gt;.yml</code>. Don't forget to clear the cache with <code>bin/console cache:clear</code> afterwards.</p>"},{"location":"installation/database/","title":"Create database","text":"<p>Create Userli database and database user.</p> <p>For simplicity, the user has full access to <code>userli</code> database.</p> <pre><code>mysql -e 'CREATE DATABASE userli'\nmysql -e 'CREATE USER `userli`@`localhost` IDENTIFIED BY \"&lt;password&gt;\"'\nmysql -e 'GRANT ALL PRIVILEGES ON userli.* TO `userli`@`localhost`'\n</code></pre>"},{"location":"installation/dovecot/","title":"Set up Dovecot authentication","text":"<p>Userli provides an API for <code>userdb</code> and <code>passdb</code> lookups.</p> <p>An adapter script written in Lua is provided to use for Lua based authentication in Dovecot. The script is released as a separate tarball with each release and is only guaranteed to be compatible with the same version of Userli.</p> <p>If the mailcrypt is enabled in Userli, the adapter script will also forward the required key material with each lookup.</p>"},{"location":"installation/dovecot/#on-the-userli-host","title":"On the Userli Host","text":"<p>Create an API token with the scope <code>dovecot</code> and use it to authenticate requests from the Dovecot host.</p> <ul> <li>Via UI: Settings \u2192 API Tokens (<code>/settings/api</code>) \u2192 Create token \u2192 select scope <code>dovecot</code>.</li> <li> <p>Via CLI:</p> <pre><code>bin/console app:api-token:create --name \"Dovecot\" --scopes dovecot\n</code></pre> </li> </ul> <p>Replaced configuration</p> <p>The previous settings <code>DOVECOT_API_ENABLED</code>, <code>DOVECOT_API_IP_ALLOWLIST</code>, and <code>DOVECOT_API_ACCESS_TOKEN</code> have been removed. Use a scoped API token instead and send it via the HTTP header <code>Authorization: Bearer &lt;PLAIN_TOKEN&gt;</code>.</p>"},{"location":"installation/dovecot/#on-the-dovecot-host","title":"On the Dovecot host","text":""},{"location":"installation/dovecot/#install-lua-dependencies","title":"Install Lua dependencies","text":"<p>On Debian based systems, run</p> <pre><code>sudo apt update\nsudo apt install lua5.3 lua-json dovecot-auth-lua\n</code></pre> <p>Warning</p> <p>Debian 12 ships version 1.3.4-2 of <code>json-lua</code>, which does not include the library for the lua5.4 runtime. This can be solved with symlinks: <pre><code>sudo ln -s  /usr/share/lua/5.3/json.lua  /usr/share/lua/5.4/\nsudo ln -s  /usr/share/lua/5.3/json  /usr/share/lua/5.4/\n</code></pre></p>"},{"location":"installation/dovecot/#install-userli-dovecot-adapter","title":"Install Userli-Dovecot-Adapter","text":"<p>Install the adapter script to a suitable location, like <code>/usr/local/bin/</code></p> <pre><code>cd /usr/local/bin/\nwget https://github.com/systemli/userli/releases/download/x.x.x/userli-dovecot-adapter-x.x.x.tar.gz\n# Check signature and hash sum, if you know how to\ntar -xvzf userli-dovecot-adapter-x.x.x.tar.gz\n</code></pre>"},{"location":"installation/dovecot/#export-environment-variables","title":"Export environment variables","text":"<ul> <li><code>USERLI_API_ACCESS_TOKEN</code> (required): plain API token with the <code>dovecot</code> scope</li> <li><code>USERLI_HOST</code> (required): host (and optional port) of the Userli instance, without a path</li> <li><code>DOVECOT_LUA_AGENT</code>, defaults to \"Userli-Dovecot-Adapter\".</li> <li><code>DOVECOT_LUA_INSECURE</code>, defaults to <code>false</code>. Connect to the Userli host via unencrypted HTTP.</li> <li><code>DOVECOT_LUA_DEBUG</code>, defaults to <code>false</code>.</li> <li><code>DOVECOT_LUA_MAX_ATTEMPTS</code>, defaults to <code>3</code>.</li> <li><code>DOVECOT_LUA_TIMEOUT</code>, defaults to <code>10000</code>.</li> </ul>"},{"location":"installation/dovecot/#example-configuration","title":"Example configuration","text":"<p><code>/etc/dovecot/conf.d/auth-lua.conf.ext</code>:</p> <pre><code># Any of the above env vars needs to be explicitly imported here,\n# in order to be available to the adapter script:\nimport_environment=USERLI_API_ACCESS_TOKEN USERLI_HOST\n\npassdb {\n  driver = lua\n  args = file=/usr/local/bin/userli-dovecot-adapter.lua blocking=yes\n}\n\nuserdb {\n  driver = lua\n  args = file=/usr/local/bin/userli-dovecot-adapter.lua blocking=yes\n}\n</code></pre>"},{"location":"installation/dovecot/#mailcrypt","title":"MailCrypt","text":"<p>In order to enable MailCrypt in Dovecot, the following is required:</p> <ul> <li>Add <code>mail_crypt</code> to the <code>mail_plugins</code> list in <code>/etc/dovecot/conf.d/10-mail.conf</code></li> <li>Set <code>mail_crypt_save_version = 0</code> in <code>/etc/dovecot/conf.d/90-mail-crypt.conf</code></li> </ul> <p>The latter disables MailCrypt per default and is necessary to not break incoming mail for legacy users without MailCrypt keys. The adapter script automatically sets <code>mail_crypt_save_version = 2</code> for all users with MailCrypt keys.</p>"},{"location":"installation/finalize/","title":"Finalize the setup","text":"<p>Last steps to make Userli work properly.</p>"},{"location":"installation/finalize/#create-database-scheme","title":"Create database scheme","text":"<pre><code># Create default database schema\nbin/console doctrine:schema:create\n\n# Load default reserved names into database\nbin/console app:reservednames:import\n\n# Warm up cache\nbin/console cache:warmup\n</code></pre>"},{"location":"installation/finalize/#configure-dovecot","title":"Configure Dovecot","text":"<p>Configure Dovecot to use separate directories per domain and user. Change the <code>mail_location</code> in <code>10-mail.conf</code> to something like this:</p> <pre><code>mail_location = maildir:~/%d/%n\n</code></pre>"},{"location":"installation/finalize/#cronjobs","title":"Cronjobs","text":"<p>Some cronjobs are needed in order to run regular tasks. As Userli does not have write permissions at Dovecot's maildir (usually this directory belongs to the system user <code>vmail</code>) you have to use a script to delete a maildir from a removed Userli account:</p> <pre><code># Daily create lists of removed mail accounts\n@daily userli cd /path/to/userli &amp;&amp; bin/console app:users:remove --list --env=prod &gt;/usr/local/share/userli/maildirs-remove.txt\n\n# Daily delete maildirs of removed accounts\n@daily /usr/local/bin/userli-maildirs-remove.sh\n\n# Daily unlink old redeemed vouchers\n@daily userli cd /path/to/userli &amp;&amp; bin/console app:voucher:unlink\n\n# Send weekly report to admins\n12 13 * * 1 userli cd /path/to/userli &amp;&amp; bin/console app:report:weekly\n</code></pre>"},{"location":"installation/webserver/","title":"Webserver configuration","text":"<p>Userli has to be installed like any other Symfony application.</p> <p>Below, you'll find some example configurations for webservers. Don't blindly copy them, but adjust them to your needs.</p>"},{"location":"installation/webserver/#caddy","title":"Caddy","text":"<pre><code>:8080\ngzip\nroot /var/www/userli/public\n# PHP-FPM Configuration\nfastcgi / /run/php/php8.0-fpm.sock php\nrewrite {\n  to {path} /index.php?{query}\n}\n</code></pre>"},{"location":"installation/webserver/#nginx","title":"Nginx","text":"<pre><code>server {\n    listen  80;\n\n    root /var/www/userli/public;\n    index index.php;\n\n    location / {\n        try_files $uri /index.php$is_args$args;\n    }\n\n    error_page 404 /404.html;\n\n    error_page 500 502 503 504 /50x.html;\n        location = /50x.html {\n        root /usr/share/nginx/www;\n    }\n\n    location ~ ^/index\\.php(/|$) {\n        fastcgi_split_path_info ^(.+\\.php)(/.*)$;\n        fastcgi_pass unix:/var/run/php/php8.0-fpm.sock;\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_param HTTPS off;\n    }\n}\n</code></pre>"},{"location":"installation/webserver/#apache2","title":"Apache2","text":"<pre><code>&lt;VirtualHost *:80&gt;\n\n    ServerName users.example.org\n    ServerAdmin admin@example.org\n    RewriteEngine On\n    RewriteRule .* https://%{SERVER_NAME}%{REQUEST_URI} [NE,R,L]\n\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n\n    ServerName users.example.org\n    ServerAdmin admin@example.org\n\n    DocumentRoot /var/www/users.example.org/www/public\n\n    &lt;Directory /var/www/users.example.org/www/public&gt;\n        AllowOverride AuthConfig FileInfo Indexes Limit Options=ExecCGI,Includes,Indexes,SymLinksIfOwnerMatch,MultiViews\n        Options -Indexes -MultiViews +SymLinksIfOwnerMatch\n\n        LimitRequestBody 10485760\n\n    &lt;/Directory&gt;\n\n    &lt;Directory /var/www/users.example.org/www/public/.well-known&gt;\n        Require all granted\n    &lt;/Directory&gt;\n\n    SetEnv APP_ENV prod\n\n    &lt;IfModule suexec_module&gt;\n        SuexecUserGroup userli userli\n    &lt;/IfModule&gt;\n\n    &lt;IfModule fcgid_module&gt;\n        AddHandler fcgid-script .php\n        FCGIWrapper /var/www/users.example.org/php-fcgi/php-fcgi-starter .php\n\n        IPCConnectTimeout 20\n        IPCCommTimeout 60\n        FcgidBusyTimeout 60\n        MaxRequestLen 10485760\n\n        &lt;Directory /var/www/users.example.org/www/public&gt;\n            Options +ExecCGI\n        &lt;/Directory&gt;\n    &lt;/IfModule&gt;\n\n    &lt;IfModule mod_headers.c&gt;\n        Header add X-Content-Type-Options \"nosniff\"\n        Header add X-XSS-Protection \"1; mode=block\"\n        Header set Referrer-Policy \"no-referrer\"\n        Header add X-Frame-Options \"SAMEORIGIN\"\n    &lt;/IfModule&gt;\n    ErrorLog  \"|/usr/bin/logger -t apache -p local0.error\"\n\n    Protocols h2 http/1.1\n\n    SSLEngine On\n    SSLCertificateFile /etc/letsencrypt/live/users.example.org/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/users.example.org/privkey.pem\n\n    &lt;IfModule mod_headers.c&gt;\n        Header always set Strict-Transport-Security: \"max-age=31536000;includeSubdomains\"\n    &lt;/IfModule&gt;\n\n&lt;/VirtualHost&gt;\n</code></pre>"},{"location":"screenshots/","title":"Screenshots","text":"<p>Here you can find screenshots of the web interface of Userli.</p>"},{"location":"screenshots/#start-page","title":"Start page","text":""},{"location":"screenshots/#register","title":"Register","text":""},{"location":"screenshots/#login","title":"Login","text":""},{"location":"screenshots/#invite-codes","title":"Invite codes","text":""},{"location":"screenshots/#aliases","title":"Aliases","text":""},{"location":"screenshots/#account-settings","title":"Account settings","text":""},{"location":"screenshots/#account-settings-recovery-code","title":"Account settings - Recovery Code","text":""},{"location":"screenshots/#password-recovery","title":"Password Recovery","text":""},{"location":"screenshots/#admin-frontend","title":"Admin Frontend","text":""},{"location":"update/","title":"Update","text":"<p>When updating to a new userli version, please take a look at <code>UPGRADE.md</code> to see whether manual steps are required.</p> <p>To automatically update the database schema of userli, run these commands:</p> <pre><code># Warm up cache\nbin/console cache:warmup\n\n# Show database schema updates\nbin/console doctrine:schema:update --dump-sql\n\n# If necessary update the database schema\nbin/console doctrine:schema:update --force\n</code></pre>"}]}