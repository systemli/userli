{% extends 'base_page.html.twig' %}

{% block title %}{{ domain }} - {{ "settings.api.title"|trans }}{% endblock %}

{% block page_title %}{{ "settings.title"|trans }}{% endblock %}

{% block page_subtitle %}{{ "settings.subtitle"|trans }}{% endblock %}

{% block page_content %}
    <div class="max-w-5xl mx-auto">
        {# Settings Navigation #}
        {% include 'Settings/_navigation.html.twig' with {'current_section': 'api'} %}
        {# Main content area #}
        <div class="bg-white rounded-xl border border-gray-200 shadow-sm">
            <div class="p-6 sm:p-8">
                <div class="flex items-center mb-6">
                    <div class="w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center mr-4">
                        <!-- heroicons:key -->
                        {{ ux_icon('heroicons:key', {class: 'w-6 h-6 text-blue-600'}) }}
                    </div>
                    <div>
                        <h3 class="text-xl font-semibold text-gray-900">{{ "settings.api.table.title"|trans }}</h3>
                        <p class="text-sm text-gray-500 mt-1">{{ "settings.api.table.description"|trans }}</p>
                    </div>
                </div>

                {# New token display #}
                {% if newToken is defined and newToken is not null %}
                    <div class="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
                        <div class="flex items-center mb-3">
                            <!-- heroicons:check-circle -->
                            {{ ux_icon('heroicons:check-circle', {class: 'w-5 h-5 text-green-600 mr-2'}) }}
                            <span class="text-sm font-medium text-green-800">{{ "settings.api.created.title"|trans }}</span>
                        </div>
                        <div class="flex items-center bg-white border border-green-200 rounded-lg p-3">
                            <pre id="new-token-display" class="flex-1 text-sm font-mono text-gray-900 mr-3 whitespace-pre-wrap break-all">{{ newToken }}</pre>
                            <button type="button"
                                    onclick="copyToClipboard('new-token-display')"
                                    class="px-3 py-2 bg-green-600 text-white rounded hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors flex-shrink-0">
                                <!-- heroicons:clipboard -->
                                {{ ux_icon('heroicons:clipboard', {class: 'w-4 h-4'}) }}
                            </button>
                        </div>
                    </div>
                {% endif %}

                {# Create new token button #}
                <div class="mb-6">
                    <a href="{{ path('settings_api_create') }}"
                       class="inline-flex items-center px-4 py-2 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors">
                        <!-- heroicons:plus -->
                        {{ ux_icon('heroicons:plus', {class: 'w-4 h-4 mr-2'}) }}
                        {{ "settings.api.create.button"|trans }}
                    </a>
                </div>

                {% if tokens is empty %}
                    {# Empty state #}
                    <div class="text-center py-12">
                        <!-- heroicons:key -->
                        {{ ux_icon('heroicons:key', {class: 'w-16 h-16 mx-auto mb-4 text-gray-300'}) }}
                        <h3 class="text-lg font-medium text-gray-900 mb-2">{{ "settings.api.table.empty-title"|trans }}</h3>
                        <p class="text-gray-500 max-w-md mx-auto">{{ "settings.api.table.empty-description"|trans }}</p>
                    </div>
                {% else %}
                    {# Tokens table #}
                    <div class="overflow-hidden">
                        <div class="overflow-x-auto">
                            <table class="min-w-full divide-y divide-gray-200">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            {{ "settings.api.table.id"|trans }}
                                        </th>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            {{ "settings.api.table.name"|trans }}
                                        </th>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            {{ "settings.api.table.scopes"|trans }}
                                        </th>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            {{ "settings.api.table.created"|trans }}
                                        </th>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            {{ "settings.api.table.last-used"|trans }}
                                        </th>
                                        <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            {{ "settings.api.table.actions"|trans }}
                                        </th>
                                    </tr>
                                </thead>
                                <tbody class="bg-white divide-y divide-gray-200">
                                    {% for token in tokens %}
                                        <tr class="hover:bg-gray-50">
                                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                                {{ token.id }}
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap">
                                                <div class="text-sm font-medium text-gray-900">{{ token.name|e }}</div>
                                            </td>
                                            <td class="px-6 py-4">
                                                <div class="flex flex-wrap gap-1">
                                                    {% for scope in token.scopes %}
                                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                                            {{ scope|e }}
                                                        </span>
                                                    {% endfor %}
                                                </div>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                <div class="flex items-center">
                                                    <!-- heroicons:calendar -->
                                                    {{ ux_icon('heroicons:calendar', {class: 'w-4 h-4 mr-1.5 text-gray-400'}) }}
                                                    {{ token.creationTime|date('d.m.Y H:i') }}
                                                </div>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                {% if token.lastUsedTime %}
                                                    <div class="flex items-center">
                                                        <!-- heroicons:clock -->
                                                        {{ ux_icon('heroicons:clock', {class: 'w-4 h-4 mr-1.5 text-gray-400'}) }}
                                                        {{ token.lastUsedTime|date('d.m.Y H:i') }}
                                                    </div>
                                                {% else %}
                                                    <span class="text-gray-400 italic">{{ "settings.api.table.never-used"|trans }}</span>
                                                {% endif %}
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                                <div class="flex justify-end">
                                                    <button type="button"
                                                            onclick="confirmDelete('{{ token.id }}', '{{ token.name|e('js') }}')"
                                                            class="inline-flex items-center px-3 py-1.5 text-red-600 hover:text-red-700 hover:bg-red-50 rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2">
                                                        <!-- heroicons:trash -->
                                                        {{ ux_icon('heroicons:trash', {class: 'w-4 h-4 mr-1'}) }}
                                                        {{ "settings.api.table.delete"|trans }}
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    {% endfor %}
                                </tbody>
                            </table>
                        </div>
                    </div>
                {% endif %}
            </div>
        </div>
    </div>

    <script>
        {% if newToken is defined and newToken is not null %}
            function copyToClipboard(elementId) {
                const element = document.getElementById(elementId);
                const text = element.textContent;

                try {
                    navigator.clipboard.writeText(text).then(() => {
                        // Visual feedback
                        const button = element.nextElementSibling;
                        const originalContent = button.innerHTML;
                        button.innerHTML = '{{ ux_icon('heroicons:check', {class: 'w-4 h-4'}) }}';
                        button.classList.remove('bg-green-600', 'hover:bg-green-700');
                        button.classList.add('bg-green-700');

                        setTimeout(() => {
                            button.innerHTML = originalContent;
                            button.classList.remove('bg-green-700');
                            button.classList.add('bg-green-600', 'hover:bg-green-700');
                        }, 2000);
                    }).catch(() => {
                        // Fallback for older browsers
                        fallbackCopy(text, element);
                    });
                } catch (err) {
                    // Fallback for older browsers
                    fallbackCopy(text, element);
                }
            }

            function fallbackCopy(text, element) {
                const textArea = document.createElement('textarea');
                textArea.value = text;
                document.body.appendChild(textArea);
                textArea.select();

                try {
                    document.execCommand('copy');

                    // Visual feedback
                    const button = element.nextElementSibling;
                    const originalContent = button.innerHTML;
                    button.innerHTML = '{{ ux_icon('heroicons:check', {class: 'w-4 h-4'}) }}';
                    button.classList.remove('bg-green-600', 'hover:bg-green-700');
                    button.classList.add('bg-green-700');

                    setTimeout(() => {
                        button.innerHTML = originalContent;
                        button.classList.remove('bg-green-700');
                        button.classList.add('bg-green-600', 'hover:bg-green-700');
                    }, 2000);

                } catch (err) {
                    console.error('Failed to copy token: ', err);
                }

                document.body.removeChild(textArea);
            }
        {% endif %}

        function confirmDelete(tokenId, tokenName) {
            const message = '{{ "settings.api.delete.confirm"|trans({'%name%': '__TOKEN_NAME__'})|e('js') }}'.replace('__TOKEN_NAME__', tokenName);

            if (confirm(message)) {
                // Create and submit form for DELETE request
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '{{ path('settings_api_delete', {'id': '__TOKEN_ID__'}) }}'.replace('__TOKEN_ID__', tokenId);

                // Add CSRF token
                const csrfInput = document.createElement('input');
                csrfInput.type = 'hidden';
                csrfInput.name = '_token';
                csrfInput.value = '{{ csrf_token('delete_api_token_' ~ '__TOKEN_ID__') }}'.replace('__TOKEN_ID__', tokenId);
                form.appendChild(csrfInput);

                // Add method override for DELETE
                const methodInput = document.createElement('input');
                methodInput.type = 'hidden';
                methodInput.name = '_method';
                methodInput.value = 'DELETE';
                form.appendChild(methodInput);

                document.body.appendChild(form);
                form.submit();
            }
        }
    </script>
{% endblock %}
