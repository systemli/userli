{% set route = app.request.attributes.get('_route') %}
{% set route_params = app.request.attributes.get('_route_params') %}
{% set params = route_params|merge(app.request.query.all) %}

{% set locale_names = {
    'en': 'English',
    'de': 'Deutsch',
    'fr': 'Français',
    'es': 'Español',
   'it': 'Italiano',
   'pt': 'Português',
   'nb': 'Norsk',
   'gsw': 'Alemannisch',
   'zh_Hant': '繁體中文'
} %}

{% if dropdown_mode is defined and dropdown_mode %}
    {# Language switcher for user dropdown context #}
    <div class="space-y-1">
        {% for locale in locales %}
            <a
                href="{{ path(route, params|merge({ _locale: locale })) }}"
                class="flex items-center px-2 py-1.5 text-sm rounded-xl transition-all duration-200 {{ locale == app.request.locale ? 'bg-blue-50 text-blue-700 font-medium' : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900' }}"
            >
                <span class="flex-shrink-0 w-5 h-5 mr-2 rounded-full {{ locale == app.request.locale ? 'bg-blue-100 text-blue-600' : 'bg-gray-200 text-gray-600' }} flex items-center justify-center text-xs font-medium transition-colors duration-200">
                    {{ locale|upper }}
                </span>
                <span class="text-xs">{{ locale_names[locale] ?? locale|upper }}</span>
                {% if locale == app.request.locale %}
                    {{ ux_icon('heroicons:check', {class: 'w-3 h-3 ml-auto text-blue-600'}) }}
                {% endif %}
            </a>
        {% endfor %}
    </div>
{% else %}
    {# Modern language switcher for main navigation #}
    <div class="relative inline-block text-left" id="language-switcher">
        <div>
            <button
                type="button"
                class="inline-flex items-center justify-center px-2 lg:px-3 py-2 text-sm font-medium text-white hover:text-gray-300 focus:outline-none focus:ring-2 focus:ring-white/50 rounded-2xl transition-all duration-300 hover:bg-white/10 hover:scale-105"
                id="language-menu-button"
                aria-expanded="false"
                aria-haspopup="true"
                title="{{ 'navbar.language'|trans }}"
            >
                {{ ux_icon('heroicons:language', {class: 'w-4 h-4 lg:mr-1 xl:mr-2'}) }}
                <span class="sr-only">{{ 'navbar.language'|trans }}:</span>
                <span class="hidden lg:inline xl:inline">{{ app.request.locale|upper }}</span>
                {{ ux_icon('heroicons:chevron-down', {class: 'w-3 h-3 lg:ml-1 transition-transform duration-200', id: 'language-arrow'}) }}
            </button>
        </div>

        {# Dropdown menu #}
        <div
            id="language-menu"
            class="absolute right-0 z-50 mt-3 w-48 origin-top-right bg-white/95 backdrop-blur-md rounded-3xl shadow-2xl ring-1 ring-black/10 divide-y divide-gray-100/50 focus:outline-none opacity-0 scale-95 pointer-events-none transition-all duration-300"
            role="menu"
            aria-orientation="vertical"
            aria-labelledby="language-menu-button"
        >
            <div class="py-2" role="none">
                {% for locale in locales %}
                    <a
                        href="{{ path(route, params|merge({ _locale: locale })) }}"
                        class="group flex items-center px-4 py-3 text-sm transition-all duration-300 rounded-2xl mx-2 {{ locale == app.request.locale ? 'bg-gray-100 text-gray-900 font-medium' : 'text-gray-700 hover:bg-gray-50 hover:text-gray-900' }}"
                        role="menuitem"
                    >
                        <span class="flex-shrink-0 w-6 h-6 mr-3 rounded-full {{ locale == app.request.locale ? 'bg-blue-100 text-blue-600' : 'bg-gray-200 text-gray-600 group-hover:bg-gray-300' }} flex items-center justify-center text-xs font-medium transition-colors duration-300">
                            {{ locale|upper }}
                        </span>
                        {{ locale_names[locale] ?? locale|upper }}
                        {% if locale == app.request.locale %}
                            {{ ux_icon('heroicons:check', {class: 'w-4 h-4 ml-auto text-blue-600'}) }}
                        {% endif %}
                    </a>
                {% endfor %}
            </div>
        </div>
    </div>
{% endif %}
{# Fallback for browsers without JavaScript - only in main navigation mode #}
{% if not (dropdown_style is defined and dropdown_style) %}
<noscript>
    <div class="relative inline-block text-left">
        <select
            onchange="window.location.href=this.value"
            class="bg-gray-900/95 text-white text-sm border-gray-600/50 rounded-2xl px-3 py-2 focus:outline-none focus:ring-2 focus:ring-white/50 backdrop-blur-md"
            aria-label="{{ 'navbar.select-language'|trans }}"
        >
            <option value="">{{ app.request.locale|upper }}</option>
            {% for locale in locales %}
                {% if locale != app.request.locale %}
                    <option value="{{ path(route, params|merge({ _locale: locale })) }}">
                        {% set locale_names = {
                            'en': 'English',
                            'de': 'Deutsch',
                            'fr': 'Français',
                            'es': 'Español',
                            'it': 'Italiano',
                            'pt': 'Português',
                            'nb': 'Norsk',
                            'gsw': 'Alemannisch',
                        } %}
                        {{ locale_names[locale] ?? locale|upper }}
                    </option>
                {% endif %}
            {% endfor %}
        </select>
    </div>
</noscript>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const switcher = document.getElementById('language-switcher');
    const button = document.getElementById('language-menu-button');
    const menu = document.getElementById('language-menu');
    const arrow = document.getElementById('language-arrow');

    if (!switcher || !button || !menu || !arrow) return;

    let isOpen = false;

    function openMenu() {
        isOpen = true;
        menu.classList.remove('opacity-0', 'scale-95', 'pointer-events-none');
        menu.classList.add('opacity-100', 'scale-100');
        arrow.classList.add('rotate-180');
        button.setAttribute('aria-expanded', 'true');
    }

    function closeMenu() {
        isOpen = false;
        menu.classList.remove('opacity-100', 'scale-100');
        menu.classList.add('opacity-0', 'scale-95', 'pointer-events-none');
        arrow.classList.remove('rotate-180');
        button.setAttribute('aria-expanded', 'false');
    }

    function toggleMenu() {
        if (isOpen) {
            closeMenu();
        } else {
            openMenu();
        }
    }

    // Toggle menu on button click
    button.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        toggleMenu();
    });

    // Close menu when clicking outside
    document.addEventListener('click', function(e) {
        if (!switcher.contains(e.target)) {
            closeMenu();
        }
    });

    // Close menu on escape key
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && isOpen) {
            closeMenu();
            button.focus();
        }
    });

    // Close menu when clicking on a menu item
    menu.addEventListener('click', function(e) {
        if (e.target.tagName === 'A') {
            closeMenu();
        }
    });
});
</script>
{% endif %}
